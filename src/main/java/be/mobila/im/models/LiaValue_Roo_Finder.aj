// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package be.mobila.im.models;

import be.mobila.im.models.LiaValue;
import java.lang.Double;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect LiaValue_Roo_Finder {
    
    public static TypedQuery<LiaValue> LiaValue.findLiaValuesByRateBetween(Double minRate, Double maxRate) {
        if (minRate == null) throw new IllegalArgumentException("The minRate argument is required");
        if (maxRate == null) throw new IllegalArgumentException("The maxRate argument is required");
        EntityManager em = LiaValue.entityManager();
        TypedQuery<LiaValue> q = em.createQuery("SELECT LiaValue FROM LiaValue AS liavalue WHERE liavalue.rate BETWEEN :minRate AND :maxRate", LiaValue.class);
        q.setParameter("minRate", minRate);
        q.setParameter("maxRate", maxRate);
        return q;
    }
    
    public static TypedQuery<LiaValue> LiaValue.findLiaValuesByRateIsNotNull() {
        EntityManager em = LiaValue.entityManager();
        TypedQuery<LiaValue> q = em.createQuery("SELECT LiaValue FROM LiaValue AS liavalue WHERE liavalue.rate IS NOT NULL", LiaValue.class);
        return q;
    }
    
    public static TypedQuery<LiaValue> LiaValue.findLiaValuesByRateEquals(Double rate) {
        if (rate == null) throw new IllegalArgumentException("The rate argument is required");
        EntityManager em = LiaValue.entityManager();
        TypedQuery<LiaValue> q = em.createQuery("SELECT LiaValue FROM LiaValue AS liavalue WHERE liavalue.rate = :rate", LiaValue.class);
        q.setParameter("rate", rate);
        return q;
    }

    public static TypedQuery<LiaValue> LiaValue.findLiaValuesForPricing(Long amount, Double minRate, Double maxRate) {
        if (amount == null || amount == 0) throw new IllegalArgumentException("The amount argument is required");
        if (minRate == null || minRate == 0) throw new IllegalArgumentException("The minRate argument is required");
        if (maxRate == null || maxRate == 0) throw new IllegalArgumentException("The maxRate argument is required");
        EntityManager em = LiaValue.entityManager();
        TypedQuery<LiaValue> q = em.createQuery("SELECT liavalue FROM LiaValue AS liavalue WHERE liavalue.amount = :amount and (liavalue.rate BETWEEN :minRate AND :maxRate) order by insuranceSubType, rate", LiaValue.class);
        q.setParameter("amount", amount);
        q.setParameter("minRate", minRate);
        q.setParameter("maxRate", maxRate);
        return q;
    }

    public static TypedQuery<LiaValue> LiaValue.findLiaValueForProposal(Long amount, Double rate, LiaInsuranceSubType insuranceSubType) {
        if (amount == null || amount == 0) throw new IllegalArgumentException("The amount argument is required");
        if (rate == null || rate == 0) throw new IllegalArgumentException("The rate argument is required");
        EntityManager em = LiaValue.entityManager();
        TypedQuery<LiaValue> q = em.createQuery("SELECT liavalue FROM LiaValue AS liavalue WHERE liavalue.amount = :amount and liavalue.rate = :rate and liavalue.insuranceSubType = :insuranceSubType", LiaValue.class);
        q.setParameter("amount", amount);
        q.setParameter("rate", rate);
        q.setParameter("insuranceSubType", insuranceSubType);
        return q;
    }
}
