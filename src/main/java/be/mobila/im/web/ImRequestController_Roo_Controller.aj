// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package be.mobila.im.web;

import be.mobila.im.models.ImRequest;
import be.mobila.im.models.ImUser;
import be.mobila.im.models.Insurance;
import be.mobila.im.models.Person;
import be.mobila.im.models.RequestFor;
import be.mobila.im.models.RequestMode;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ImRequestController_Roo_Controller {
    
    @Autowired
    private GenericConversionService ImRequestController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String ImRequestController.create(@Valid ImRequest imRequest, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("imRequest", imRequest);
            addDateTimeFormatPatterns(model);
            return "imrequests/create";
        }
        imRequest.persist();
        return "redirect:/imrequests/" + encodeUrlPathSegment(imRequest.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ImRequestController.createForm(Model model) {
        model.addAttribute("imRequest", new ImRequest());
        addDateTimeFormatPatterns(model);
        return "imrequests/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ImRequestController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("imrequest", ImRequest.findImRequest(id));
        model.addAttribute("itemId", id);
        return "imrequests/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ImRequestController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("imrequests", ImRequest.findImRequestEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) ImRequest.countImRequests() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("imrequests", ImRequest.findAllImRequests());
        }
        addDateTimeFormatPatterns(model);
        return "imrequests/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ImRequestController.update(@Valid ImRequest imRequest, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("imRequest", imRequest);
            addDateTimeFormatPatterns(model);
            return "imrequests/update";
        }
        imRequest.merge();
        return "redirect:/imrequests/" + encodeUrlPathSegment(imRequest.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ImRequestController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("imRequest", ImRequest.findImRequest(id));
        addDateTimeFormatPatterns(model);
        return "imrequests/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ImRequestController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        ImRequest.findImRequest(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/imrequests?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("imusers")
    public Collection<ImUser> ImRequestController.populateImUsers() {
        return ImUser.findAllImUsers();
    }
    
    @ModelAttribute("insurances")
    public Collection<Insurance> ImRequestController.populateInsurances() {
        return Insurance.findAllInsurances();
    }
    
    @ModelAttribute("people")
    public Collection<Person> ImRequestController.populatePeople() {
        return Person.findAllPeople();
    }
    
    @ModelAttribute("requestfors")
    public Collection<RequestFor> ImRequestController.populateRequestFors() {
        return Arrays.asList(RequestFor.class.getEnumConstants());
    }
    
    @ModelAttribute("requestmodes")
    public Collection<RequestMode> ImRequestController.populateRequestModes() {
        return Arrays.asList(RequestMode.class.getEnumConstants());
    }
    
    Converter<ImRequest, String> ImRequestController.getImRequestConverter() {
        return new Converter<ImRequest, String>() {
            public String convert(ImRequest imRequest) {
                return new StringBuilder().append(imRequest.getRequestDate()).append(" ").append(imRequest.getUri()).toString();
            }
        };
    }
    
    Converter<ImUser, String> ImRequestController.getImUserConverter() {
        return new Converter<ImUser, String>() {
            public String convert(ImUser imUser) {
                return new StringBuilder().append(imUser.getName()).append(" ").append(imUser.getFirstname()).append(" ").append(imUser.getIdentifier()).toString();
            }
        };
    }
    
    Converter<Insurance, String> ImRequestController.getInsuranceConverter() {
        return new Converter<Insurance, String>() {
            public String convert(Insurance insurance) {
                return new StringBuilder().append(insurance.getImportFile()).append(" ").append(insurance.getConverter()).append(" ").append(insurance.getAbstractDataSaver()).toString();
            }
        };
    }
    
    Converter<Person, String> ImRequestController.getPersonConverter() {
        return new Converter<Person, String>() {
            public String convert(Person person) {
                return new StringBuilder().append(person.getName()).append(" ").append(person.getFirstname()).append(" ").append(person.getAddress()).toString();
            }
        };
    }
    
    @PostConstruct
    void ImRequestController.registerConverters() {
        conversionService.addConverter(getImRequestConverter());
        conversionService.addConverter(getImUserConverter());
        conversionService.addConverter(getInsuranceConverter());
        conversionService.addConverter(getPersonConverter());
    }
    
    void ImRequestController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("imRequest_requestdate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String ImRequestController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
