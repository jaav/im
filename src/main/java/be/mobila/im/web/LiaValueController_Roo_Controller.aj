// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package be.mobila.im.web;

import be.mobila.im.models.Insurance;
import be.mobila.im.models.LiaInsuranceSubType;
import be.mobila.im.models.LiaValue;
import java.io.UnsupportedEncodingException;
import java.lang.Double;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect LiaValueController_Roo_Controller {
    
    @Autowired
    private GenericConversionService LiaValueController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String LiaValueController.create(@Valid LiaValue liaValue, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("liaValue", liaValue);
            return "liavalues/create";
        }
        liaValue.persist();
        return "redirect:/liavalues/" + encodeUrlPathSegment(liaValue.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String LiaValueController.createForm(Model model) {
        model.addAttribute("liaValue", new LiaValue());
        return "liavalues/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String LiaValueController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("liavalue", LiaValue.findLiaValue(id));
        model.addAttribute("itemId", id);
        return "liavalues/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String LiaValueController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("liavalues", LiaValue.findLiaValueEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) LiaValue.countLiaValues() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("liavalues", LiaValue.findAllLiaValues());
        }
        return "liavalues/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String LiaValueController.update(@Valid LiaValue liaValue, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("liaValue", liaValue);
            return "liavalues/update";
        }
        liaValue.merge();
        return "redirect:/liavalues/" + encodeUrlPathSegment(liaValue.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String LiaValueController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("liaValue", LiaValue.findLiaValue(id));
        return "liavalues/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String LiaValueController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        LiaValue.findLiaValue(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/liavalues?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @RequestMapping(params = { "find=ByRateBetween", "form" }, method = RequestMethod.GET)
    public String LiaValueController.findLiaValuesByRateBetweenForm(Model model) {
        return "liavalues/findLiaValuesByRateBetween";
    }
    
    @RequestMapping(params = "find=ByRateBetween", method = RequestMethod.GET)
    public String LiaValueController.findLiaValuesByRateBetween(@RequestParam("minRate") Double minRate, @RequestParam("maxRate") Double maxRate, Model model) {
        model.addAttribute("liavalues", LiaValue.findLiaValuesByRateBetween(minRate, maxRate).getResultList());
        return "liavalues/list";
    }
    
    @RequestMapping(params = { "find=ByRateIsNotNull", "form" }, method = RequestMethod.GET)
    public String LiaValueController.findLiaValuesByRateIsNotNullForm() {
        return "liavalues/findLiaValuesByRateIsNotNull";
    }
    
    @RequestMapping(params = "find=ByRateIsNotNull", method = RequestMethod.GET)
    public String LiaValueController.findLiaValuesByRateIsNotNull(Model model) {
        model.addAttribute("liavalues", LiaValue.findLiaValuesByRateIsNotNull().getResultList());
        return "liavalues/list";
    }
    
    @RequestMapping(params = { "find=ByRateEquals", "form" }, method = RequestMethod.GET)
    public String LiaValueController.findLiaValuesByRateEqualsForm(Model model) {
        return "liavalues/findLiaValuesByRateEquals";
    }
    
    @RequestMapping(params = "find=ByRateEquals", method = RequestMethod.GET)
    public String LiaValueController.findLiaValuesByRateEquals(@RequestParam("rate") Double rate, Model model) {
        model.addAttribute("liavalues", LiaValue.findLiaValuesByRateEquals(rate).getResultList());
        return "liavalues/list";
    }
    
    @ModelAttribute("insurances")
    public Collection<Insurance> LiaValueController.populateInsurances() {
        return Insurance.findAllInsurances();
    }
    
    @ModelAttribute("liainsurancesubtypes")
    public Collection<LiaInsuranceSubType> LiaValueController.populateLiaInsuranceSubTypes() {
        return Arrays.asList(LiaInsuranceSubType.class.getEnumConstants());
    }
    
    Converter<Insurance, String> LiaValueController.getInsuranceConverter() {
        return new Converter<Insurance, String>() {
            public String convert(Insurance insurance) {
                return new StringBuilder().append(insurance.getImportFile()).append(" ").append(insurance.getConverter()).append(" ").append(insurance.getAbstractDataSaver()).toString();
            }
        };
    }
    
    Converter<LiaValue, String> LiaValueController.getLiaValueConverter() {
        return new Converter<LiaValue, String>() {
            public String convert(LiaValue liaValue) {
                return new StringBuilder().append(liaValue.getProposal()).append(" ").append(liaValue.getAmount()).append(" ").append(liaValue.getRate()).toString();
            }
        };
    }
    
    @PostConstruct
    void LiaValueController.registerConverters() {
        conversionService.addConverter(getInsuranceConverter());
        conversionService.addConverter(getLiaValueConverter());
    }
    
    private String LiaValueController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
